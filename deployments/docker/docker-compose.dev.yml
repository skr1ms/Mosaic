# run with: docker compose --env-file .env -f deployments/docker/docker-compose.dev.yml up --build -d

services:
  postgres:
    image: postgres:17-alpine
    container_name: postgres
    ports:
      - "5433:5432"
    env_file:
      - ../../.env
    environment:
      POSTGRES_DB: mosaic
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:8
    container_name: redis
    ports:
      - "6380:6379"
    env_file:
      - ../../.env
    command:
      [
        "redis-server",
        "--requirepass",
        "${REDIS_PASSWORD}",
        "--appendonly",
        "yes",
      ]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  minio:
    image: minio/minio:RELEASE.2024-05-10T01-41-38Z
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    env_file:
      - ../../.env
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: server /data --address ":9000" --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9000/minio/health/live",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  minio-init:
    image: minio/mc:latest
    container_name: minio-init
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      until /usr/bin/mc alias set myminio http://minio:9000 admin ${MINIO_ROOT_PASSWORD}; do sleep 2; done;
      /usr/bin/mc mb myminio/${MINIO_IMAGE_BUCKET} --ignore-existing;
      /usr/bin/mc mb myminio/${MINIO_LOGOS_BUCKET} --ignore-existing;
      /usr/bin/mc mb myminio/${MINIO_CHAT_BUCKET} --ignore-existing;
      /usr/bin/mc mb myminio/${MINIO_PREVIEW_BUCKET} --ignore-existing;
      /usr/bin/mc anonymous set public myminio/${MINIO_IMAGE_BUCKET};
      /usr/bin/mc anonymous set public myminio/${MINIO_LOGOS_BUCKET};
      /usr/bin/mc anonymous set public myminio/${MINIO_CHAT_BUCKET};
      /usr/bin/mc anonymous set public myminio/${MINIO_PREVIEW_BUCKET};
      echo 'Buckets initialized successfully';
      exit 0;
      "
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_IMAGE_BUCKET=${MINIO_IMAGE_BUCKET}
      - MINIO_LOGOS_BUCKET=${MINIO_LOGOS_BUCKET}
      - MINIO_CHAT_BUCKET=${MINIO_CHAT_BUCKET}
      - MINIO_PREVIEW_BUCKET=${MINIO_PREVIEW_BUCKET}
    restart: "no"

  backend:
    build:
      context: ../../backend
      dockerfile: Dockerfile
      args:
        - BUILDKIT_INLINE_CACHE=1
    container_name: backend
    ports:
      - "8080:8080"
    env_file:
      - ../../.env
    environment:
      ENVIRONMENT: development
      ENV_FILE: /dev/null
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@postgres:5432/mosaic?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      MINIO_ENDPOINT: ${MINIO_ENDPOINT}
      MINIO_PUBLIC_URL: ${MINIO_PUBLIC_URL}
      SERVER_PORT: 8080
      CORS_ALLOWED_ORIGINS: http://localhost:5174,http://localhost:5173
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_IMAGE_BUCKET: ${MINIO_IMAGE_BUCKET}
      MINIO_LOGOS_BUCKET: ${MINIO_LOGOS_BUCKET}
      MINIO_CHAT_BUCKET: ${MINIO_CHAT_BUCKET}
      MINIO_PREVIEW_BUCKET: ${MINIO_PREVIEW_BUCKET}
      MINIO_USE_SSL: "false"
      MINIO_REGION: "us-east-1"
      STABLE_DIFFUSION_URL: ${STABLE_DIFFUSION_URL}
      FRONTEND_URL: ${FRONTEND_URL}
      ALFA_BANK_PROD_URL: ${ALFA_BANK_PROD_URL}
      ALFA_BANK_USERNAME: ${ALFA_BANK_USERNAME}
      ALFA_BANK_PASSWORD: ${ALFA_BANK_PASSWORD}
      ALFA_BANK_WEBHOOK_SECRET: ${ALFA_BANK_WEBHOOK_SECRET}
      ALFA_BANK_WEBHOOK_URL: ${ALFA_BANK_WEBHOOK_URL}
      RECAPTCHA_SITE_KEY: ${RECAPTCHA_SITE_KEY}
      RECAPTCHA_SECRET_KEY: ${RECAPTCHA_SECRET_KEY}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: "465"
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_FROM: ${SMTP_FROM}
      SMTP_SSL: "true"
      LETSENCRYPT_DOMAIN: "localhost"
      LETSENCRYPT_EMAIL: ${SMTP_FROM}
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      DEFAULT_ADMIN_PASSWORD: ${DEFAULT_ADMIN_PASSWORD}
      DEFAULT_ADMIN_EMAIL: ${DEFAULT_ADMIN_EMAIL}
      DEFAULT_PASSWORD: ${DEFAULT_PASSWORD}
      IMAGE_LOCAL_RETENTION_HOURS: "24"
      GITLAB_BASE_URL: ${GITLAB_BASE_URL}
      GITLAB_API_TOKEN: ${GITLAB_API_TOKEN}
      GITLAB_PROJECT_ID: ${GITLAB_PROJECT_ID}
    volumes:
      - backend_temp:/tmp
      - ../../backend/scripts/pallete_bw.xlsx:/app/scripts/pallete_bw.xlsx:ro
      - ../../backend/scripts/pallete_fl.xlsx:/app/scripts/pallete_fl.xlsx:ro
      - ../../backend/scripts/pallete_tl.xlsx:/app/scripts/pallete_tl.xlsx:ro
      - ../../backend/scripts/pallete_max.xlsx:/app/scripts/pallete_max.xlsx:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      minio-init:
        condition: service_completed_successfully
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:8080/health",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  dashboards:
    build:
      context: ../../frontend/dashboards
      dockerfile: Dockerfile
      args:
        BUILD_ENV: dev
    container_name: dashboards
    ports:
      - "5174:5174"
    volumes:
      - ../../frontend/dashboards:/app
      - /app/node_modules
    environment:
      NODE_ENV: development
      HOST: 0.0.0.0
      PORT: 5174
      CHOKIDAR_USEPOLLING: 1
      FAST_REFRESH: "false"
      GENERATE_SOURCEMAP: "false"
      INLINE_RUNTIME_CHUNK: "false"
      REACT_APP_API_BASE_URL: http://localhost:8080/api
      REACT_APP_ENVIRONMENT: development
      REACT_APP_DASHBOARD_URL: http://localhost:5174
      REACT_APP_PUBLIC_SITE_URL: http://localhost:5173
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:5174",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  public-site:
    build:
      context: ../../frontend/public-site
      dockerfile: Dockerfile
      args:
        BUILD_ENV: development
      target: development
    container_name: public-site
    ports:
      - "5173:5173"
    environment:
      NODE_ENV: development
      VITE_API_BASE_URL: http://localhost:8080/api
      VITE_ENVIRONMENT: development
      VITE_DASHBOARD_URL: http://localhost:5174
      VITE_PUBLIC_SITE_URL: http://localhost:5173
      PORT: 5173
    volumes:
      - ../../frontend/public-site/src:/app/src
      - ../../frontend/public-site/public:/app/public
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:5173",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.4.3
    container_name: grafana
    ports:
      - "3000:3000"
    env_file:
      - ../../.env
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SECURITY_ADMIN_USER: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ../../monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../../monitoring/grafana/provisioning/datasources/datasources.dev.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ../../monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
      - loki

  prometheus:
    image: prom/prometheus:v2.52.0
    container_name: prometheus
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle"
      - "--web.listen-address=0.0.0.0:9090"
    volumes:
      - ../../monitoring/prometheus.dev.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus

  loki:
    image: grafana/loki:2.9.8
    container_name: loki
    ports:
      - "3100:3100"
    command:
      [
        "-config.file=/etc/loki/local-config.yaml",
        "-server.http-listen-port=3100",
      ]
    volumes:
      - ../../monitoring/loki.dev.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki

  promtail:
    image: grafana/promtail:2.9.8
    container_name: promtail
    command: ["-config.file=/etc/promtail/config.yml"]
    volumes:
      - ../../monitoring/promtail.dev.yml:/etc/promtail/config.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/log:/var/log:ro
    depends_on:
      - loki

volumes:
  postgres_data:
  redis_data:
  minio_data:
  backend_temp:
  grafana_data:
  prometheus_data:
  loki_data:
